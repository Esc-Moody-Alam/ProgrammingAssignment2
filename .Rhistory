swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getpwd()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
getwd
getwd()
file.create("mytest.R")
ls
ls()
list.files()
file.exists(mytest.R)
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest2.R")
file.path("mytest3.R")
play()
args(file.path)
file.path("fodler1", "folder2")
nxt()
file.path("fodler1", "folder2")
info()
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
play()
nxt()
bye()
source('~/Desktop/NayaDour/Course2-R-Programming/Week1Assignment/Assignment1.R')
swirl()
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create(testdir)
list.files()
play()
file.remove("testdir")
nxt()
dir.create("testdir")
setpwd("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files(())
list.files()
file.exists("mytest.R")
file.info("testdir")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.cop("mytest2.R", "mytest3.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
dir.create(file.path("folder1", "folder2"), recursive = TRUE)
?dir.create
dir.create(file.path("folder1", "folder2"), recursive = TRUE)
dir.create(file.path("folder1", "testdir3"), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
swirl()
1:20
pi:10
15:1
':'
`:`
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times =10)
rep(c(0,1,2), each =10)
url("www.google.com")
url("http://www.google.com")
packageVersion(swirl)
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swilr()
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files()
?list.files
args(list.files)
old.dir <-getwd()
dir.crer
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
dir.create(file.path("folder1", "folder2"), recursive = TRUE)
?dir.create
dir.create(file.path("folder1", "folder2"), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
`:`
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seeq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times =40)
rep(c(0, 1, 2), times =10)
rep(c(0, 1, 2), each =10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
tf2 <- num_vect >=6
num_vect >=6
my_char = c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Moody")
my_name
paste(my_name, collapse = " ")
paste(("Hello", "world!", sep= " "))
paste(("Hello", "world!", sep= " ")
paste("Hello", "world!", sep= " ")
past(1:3, c("X", "Y", "Z"), sep=" ")
paste(1:3, c("X", "Y", "Z"), sep=" ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <-nnorm(1000)
y <-rnorm(1000)
z <-rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y >0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[30000]
x[3000]
bye()
library(swirl)
swirl()
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2, norf=NA)
vect
names(vect)
vect2 <-c(11, 2, NA)
names(vect2) <-c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- (1:20, 4, 5)
my_matrix2 <- (c(1:20), 4, 5)
my_matrix2 <- (c(1:20), nrow=4, ncol=5)
my_matrix2 <- (data=c(1:20), nrow=4, ncol=5)
my_matrix2 <- (my_vector, nrow=4, ncol=5)
my_matrix2 <- matrix(c(1:20), 4, 5)
identical(my_matrix, my_matrix2)
patients = c("Bill", "Gina", "Kelly","Sean")
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <-cnames
my_data
bye()
exit
exit()
data = read.csv("~/Desktop/TC9a/TrialMonitoringData.csv")
head(data)
head(data[3])
class(data[3])
exit
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
?unclass
library(swirl)
rm(list=ls())
swirl()
5+7
bye()
swirl()
TRUE==TRUE
(FALSE == TRUE)  == FALSE
6==7
6 < 7
10 <= 10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean( c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num
| = 5)
remainder(divisor = 11, num
| = 5)
remainder(divisor = 11, num= 5)
remainder(4, div = 2)
args(remainder)
submit
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x) x(1), c(8,4,0))
evaluate(function(x)x(1), c(8,4,0))
evaluate(function(x){x(1)}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
telegram("Whatever" "you say")
telegram("Whatever", "you say")
submit()
submit()
mad_libs("Birmingham", "wonderful", "city")
submit()
"I" %p% "love" %p% "R!"
head(flags)
head(flags)
dim(flags)
viewinfo()
class(flahs)
class(flags)
cls_list <-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <-[, 11:17]
flag_colors <-flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <-lapply(flags, unique)
unique_vals
unique_vals <-lapply(flags, length)
sapply(unique_vals, length)
unique_vals <-sapply(flags, unique)
sapply(unique_vals, unique)
sapply(flags, unique)
unique_vals
lapply(unique_vals, function(x){x[2]})
swirl()
bye()
swirl()
swirl()
d1 <-Sys.Date()
class(d1)
unclass(d1)
d1
d1 <-as.Date("1969-01-01")
d2 <-as.Date("1969-01-01")
d1 <-Sys.Date()
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 = as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(swirl)
swirl()
viewinfo()
sapply(flags,unique)
vappl(flags, unique, numeric(1))
vapply(flags, unique, numeric(1))
vapply(flags, unique)
vapply(flags, unique)
ok()
sapply(flags, class)
sapply(flags, class, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
getwd()
setwd("~/Desktop/NayaDour/Course2-R-Programming/Week3Assignment/ProgrammingAssignment2/")
source("cachematrix.R")
m<- matrix(c(3,2,2,3),2,2)
mc <- makeCacheMatrix(m)
mc
m
mc$get()
mc$getInverse()
print(mc$getInverse())
source("cachematrix.R")
mc$getInverse()
print(mc$getInverse())
print(mc$getInverse())
source("cachematrix.R")
print(mc$getInverse())
source("cachematrix.R")
testit()
mc
rm(list=ls()
)
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
cacheSolve(mc)
cacheSolve(mc)
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
testit()
source("cachematrix.R")
testit()
cacheSolve(mc)
source("cachematrix.R")
cacheSolve(mc)
source("cachematrix.R")
cacheSolve(mc)
testit()
cacheSolve(mc)
source("cachematrix.R")
cacheSolve(mc)
testit()
source("cachematrix.R")
testit()
inverse <- solve(x$get(),...)
testit()
inverse <- solve(x$get(),...)
testit()
inverse <- solve(x$get(),...)
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
source("cachematrix.R")
testit()
